mmcv.Config.fromfile
	封装方法：可以看到，配置的cfg方式一般不是直接实例化Config类，而是用其fromfile方法
	       （用静态修饰器@staticmethod声明的，可以直接类调用不实例化），
	        该函数返回的是Config类：Config(cfg_dict, filename=filename)；
	        传入的参数cfg_dict是将配置文件(如mask_rcnn_r101_fpn_1x.py)用一个大字典进行封装，
	        内嵌套小字典就是py文件的dict，最后是k-v，对应每个选项;filename就是py配置文件的路径名
	元素调用方法：返回的类可以看作一个大字典，嵌套了py配置文件的元素，以字典形式逐级调用，如
	            cfg.model，cfg.train_cfg;cfg.model.type,cfg.model.backbone.type等

Config类（在utils内）
    使用mmcv.Config.fromfile还是会返回Config类，最终离不开该类的相关属性，相关属性介绍：
        __init__(self, cfg_dict=None, filename=None)
            把cfg_dict封装成ConfigDict类，赋值给'_cfg_dict'
        __getattr__(self, name)
            如果属性中没有name，则动态添加到该key到_cfg_dict中去
        __setattr__(self, name, value)
            进行赋值时自动调用该方法完成赋值，可以看出也会先将value封装成ConfigDict，然后调用_cfg_dict的__setattr__完成value对name的赋值
        fromfile(filename)：
            如上描述的，将py配置文件转为config类字典。
            
    

ConfigDict(Dict)类
    __missing__(self, name)
        当访问字典不存在的key时触发的行为：抛出错误指出不存在的key



Config.fromfile得到的字典cfg和原来config文件对比，唯一的不同点就是将data部分的变量代进去为字符串了，其他直接都是字典化即可。
以Faster RCNN为例查看如下：

Config (path: /home/bit/mmdetection/configs/faster_rcnn_r50_fpn_1x.py): 
{
'model': 
    {
    'type': 'FasterRCNN', 
    'pretrained': 'modelzoo://resnet50', 
    'backbone': {
        'type': 'ResNet', 
        'depth': 50, 
        'num_stages': 4, 
        'out_indices': (0, 1, 2, 3), 
        'frozen_stages': 1, 
        'style': 'pytorch'}, 
    'neck': 
        {'type': 'FPN', 'in_channels': [256, 512, 1024, 2048], 'out_channels': 256, 'num_outs': 5}, 
    'rpn_head': 
        {'type': 'RPNHead', 'in_channels': 256, 'feat_channels': 256, 'anchor_scales': [8], 'anchor_ratios': [0.5, 1.0, 2.0], 'anchor_strides': [4, 8, 16, 32, 64], 'target_means': [0.0, 0.0, 0.0, 0.0], 'target_stds': [1.0, 1.0, 1.0, 1.0], 'loss_cls': {'type': 'CrossEntropyLoss', 'use_sigmoid': True, 'loss_weight': 1.0}, 'loss_bbox': {'type': 'SmoothL1Loss', 'beta': 0.1111111111111111, 'loss_weight': 1.0}}, 
    'bbox_roi_extractor': 
        {'type': 'SingleRoIExtractor', 'roi_layer': {'type': 'RoIAlign', 'out_size': 7, 'sample_num': 2}, 'out_channels': 256, 'featmap_strides': [4, 8, 16, 32]}, 'bbox_head': {'type': 'SharedFCBBoxHead', 'num_fcs': 2, 'in_channels': 256, 'fc_out_channels': 1024, 'roi_feat_size': 7, 'num_classes': 81, 'target_means': [0.0, 0.0, 0.0, 0.0], 'target_stds': [0.1, 0.1, 0.2, 0.2], 'reg_class_agnostic': False, 'loss_cls': {'type': 'CrossEntropyLoss', 'use_sigmoid': False, 'loss_weight': 1.0}, 'loss_bbox': {'type': 'SmoothL1Loss', 'beta': 1.0, 'loss_weight': 1.0}}}, 

'train_cfg': 
    {
    'rpn': {
        'assigner': {'type': 'MaxIoUAssigner', 'pos_iou_thr': 0.7, 'neg_iou_thr': 0.3, 'min_pos_iou': 0.3, 'ignore_iof_thr': -1}, 
        'sampler': {'type': 'RandomSampler', 'num': 256, 'pos_fraction': 0.5, 'neg_pos_ub': -1, 'add_gt_as_proposals': False}, 
        'allowed_border': 0, 
        'pos_weight': -1, 
        'debug': False}, 
    'rpn_proposal': {
        'nms_across_levels': False, 'nms_pre': 2000, 'nms_post': 2000, 'max_num': 2000, 'nms_thr': 0.7, 'min_bbox_size': 0}, 
    'rcnn': {
        'assigner': {'type': 'MaxIoUAssigner', 'pos_iou_thr': 0.5, 'neg_iou_thr': 0.5, 'min_pos_iou': 0.5, 'ignore_iof_thr': -1}, 
        'sampler': {'type': 'RandomSampler', 'num': 512, 'pos_fraction': 0.25, 'neg_pos_ub': -1, 'add_gt_as_proposals': True}, 
        'pos_weight': -1, 
        'debug': False}}, 
'test_cfg': 
    {
    'rpn': {
        'nms_across_levels': False, 'nms_pre': 1000, 'nms_post': 1000, 'max_num': 1000, 'nms_thr': 0.7, 'min_bbox_size': 0}, 
    'rcnn': {'score_thr': 0.05, 'nms': {'type': 'nms', 'iou_thr': 0.5}, 'max_per_img': 100}},

'dataset_type': 'MyDataset', 
'data_root': '/py/R2CNN-tensorflow/data/VOCdevkit/VOC2007/', 
'img_norm_cfg': {'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.12, 57.375], 'to_rgb': True}, 

'data': {
    'imgs_per_gpu': 1, 
    'workers_per_gpu': 1, 
    'train': {
        'type': 'MyDataset', 
        'ann_file': '/py/R2CNN-tensorflow/data/VOCdevkit/VOC2007/Main/train.txt', 
        'img_prefix': '/py/R2CNN-tensorflow/data/VOCdevkit/VOC2007/', 
        'img_scale': (1333, 800), 
        'img_norm_cfg': {'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.12, 57.375], 'to_rgb': True}, 'size_divisor': 32, 
        'flip_ratio': 0.5, 
        'with_mask': False, 
        'with_crowd': True, 
        'with_label': True}, 
    'val': {
        'type': 'MyDataset', 
        'ann_file': '/py/R2CNN-tensorflow/data/VOCdevkit/VOC2007/Main/train.txt', 
        'img_prefix': '/py/R2CNN-tensorflow/data/VOCdevkit/VOC2007/', 
        'img_scale': (1333, 800), 
        'img_norm_cfg': {'mean': [123.675, 116.28, 103.53], 
        'std': [58.395, 57.12, 57.375], 'to_rgb': True}, 
        'size_divisor': 32, 'flip_ratio': 0, 'with_mask': False, 'with_crowd': True, 'with_label': True}, 
    'test': {
        'type': 'MyDataset', 
        'ann_file': '/py/R2CNN-tensorflow/data/VOCdevkit/VOC2007/Main/train.txt', 
        'img_prefix': '/py/R2CNN-tensorflow/data/VOCdevkit/VOC2007/', 
        'img_scale': (1333, 800), 
        'img_norm_cfg': {'mean': [123.675, 116.28, 103.53], 'std': [58.395, 57.12, 57.375], 'to_rgb': True}, 'size_divisor': 32, 'flip_ratio': 0, 'with_mask': False, 'with_label': False, 'test_mode': True}},

'optimizer': {'type': 'SGD', 'lr': 0.0025, 'momentum': 0.9, 'weight_decay': 0.0001}, 
'optimizer_config': {'grad_clip': {'max_norm': 35, 'norm_type': 2}}, 
'lr_config': {'policy': 'step', 'warmup': 'linear', 'warmup_iters': 500, 'warmup_ratio': 0.3333333333333333, 'step': [8, 11]}, 
'checkpoint_config': {'interval': 1000}, 
'log_config': {'interval': 1, 'hooks': [{'type': 'TextLoggerHook'}]}, 
'total_epochs': 1200000, 
'dist_params': {'backend': 'nccl'}, 
'log_level': 'INFO', 
'work_dir': './work_dirs/faster_rcnn_r50_fpn_1x', 
'load_from': None, 
'resume_from': None, 
'workflow': [('train', 1)], 'gpus': 1}